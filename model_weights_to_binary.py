import numpy as np
import array
#The file structure is as follows
#1 int for length of tensor name in chars, then tensor name in chars
#1 int for num rows, 1 int for num cols
#numrows*numcols floats following that.
#Then onto the next array

#The bin files generated by this program are intended to be moved into HUBERT/bin so that they can be loaded into the hubert model
#see exportGeneric3d for exporting a numpy in the middle of a program run.

def exportTrainedWeights():
    print("*** MNLI ***")
    npzfile = np.load("export/MNLI/MNLI_state_dict.npz")

    array_names = open("onelayer.txt", "r")
    f = open('MNLI_state.bin', 'w+b')

    while(1):
        idx = array_names.readline().rstrip()
        if idx == "":
            break
        x = npzfile[idx]
        print(len(idx), idx, x.shape)
        if x.ndim == 1: #verification
            print(x[0])
        else:
            print(x[0][0])

        info_array = array.array("i")
        length = array.array('i', [len(idx)])
        length.tofile(f)
        idx = bytearray(idx, encoding ='utf-8')
        f.write(idx)
        if len(x.shape) == 1:
            info_array.append(x.shape[0])
            info_array.append(1)
        else: #we only do a max of two dimentions
            info_array.append(x.shape[0])
            info_array.append(x.shape[1])
        info_array.tofile(f)
        f.write(x.tobytes())

    f.close()

#The file structure is as follows
#1 int for length of tensor name in chars, then tensor name in chars
#1 int for num rows, 1 int for num cols, 1 for depth
#numrows*numcols*depth floats following that.

def exportGeneric3d(numpy_array, name):
    print("exporting a 3d binfile")
    f = open(f'{name}.bin', 'w+b')
    print(numpy_array.shape)
    assert(numpy_array.ndim==3)

    name_of_idx = "generic"
    length = array.array('i', [len(name_of_idx)])
    length.tofile(f) #length of name
    name_of_idx = bytearray(name_of_idx, encoding ='utf-8')
    f.write(name_of_idx) #

    info_array = array.array("i")
    info_array.append(numpy_array.shape[0])
    info_array.append(numpy_array.shape[1])
    info_array.append(numpy_array.shape[2])
    info_array.tofile(f)
    f.write(numpy_array.tobytes())
